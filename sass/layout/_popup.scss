.popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    background-color: rgba($color-black, .8);
    z-index: 4000;
    backdrop-filter: blur(10px); //CCC:applies a specified filter to what is seen through the selected element (the elements behind the backdrop) 
    
    opacity: 0;
    visibility: hidden;
    transition: all .4s;

    &__content {
        width: 75%;
        @include absCenter;
        background-color: $color-white;
        box-shadow: 0 2rem 4rem rgba($color-black, .3);
        border-radius: 3px;
        display: table;
        overflow: hidden;

        opacity: 0;
        transform: translate(-50%, -50%) scale(.25);  //CCC:Only 1 transform property set on an element can have effect on it(the last one due to cascade). The previous set values are lost or updated by the latter. Here we already used transform translate to center the element, but we also need to scale it down. We can then write transform scale only here but then it overrides the translate we already have. So repetition of translate is required here
        transition: all .5s .2s;

        @include respond(tab-land) {
            width: 90%;
        }

        
    }

    &__leftside {
        width: 33.3333%;
        display: table-cell;
        
    }

    &__rightside {
        width: 66.6666%;
        display: table-cell;
        vertical-align: middle;   //we also have the value of top, bottom for the property
        padding: 3rem 5rem;

        @include respond(tab-land) {
            width: 1rem 2rem;
        }
    }

    &__img {
        display: block;
        width: 100%;
    }

    &__text {
        font-size: 1.4rem;
        margin-bottom: 4rem;

        column-count: 2;  //CCC:no of columns
        column-gap: 4rem; //space between the columns. Default 1em (=14px here)
        column-rule: 1px solid $color-grey-light-2;

        hyphens: auto;
    }

    &:target {  //:target represents the state of a unique element (the target element) with an ID === URL's fragment(pageURL/#fragment). As soon "book now!" btn--white is clicked on, its href value (#popup) gets added to the URL of the page so div.popup becomes the target element. i.e. div.popup element now has the :target pseudo-class  which is then styled using .popup:target
        opacity: 1;
        visibility: visible;
    }

    &:target &__content {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
    }

    &__close {  //when this is clicked on the URL is updated with link's href(#section-tours). Now div.popup is no longer the :target element(div.section-tours is because now its ID matches the URL fragrement #section-tours) and it loses the opacity and visibility styles earlier appplied
        &:link,
        &:visited {
            text-decoration: none;
            line-height: 1;
            color: $color-grey-dark;
            font-size: 3rem;
            position: absolute; //positioned relative to the fixed positioned popup ancestor 
            top: 2.5rem;
            right: 2.5rem;
            display: inline-block;
            transition: all .2s;
        }

        &:hover,
        &:active {
            color: $color-primary;
        }
    }
}